name: CI/CD - Build, Push and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            juanpaz98/productly:latest
            juanpaz98/productly:${{ github.sha }}

  deploy-to-vps:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Variables
            CONTAINER_NAME=productly
            IMAGE=juanpaz98/productly:latest
            STATIC_VOLUME=static_volume
            DB_VOLUME=db_volume

            # Crear volúmenes si no existen
            docker volume inspect $STATIC_VOLUME >/dev/null 2>&1 || docker volume create $STATIC_VOLUME
            docker volume inspect $DB_VOLUME >/dev/null 2>&1 || docker volume create $DB_VOLUME

            # Traer última imagen
            docker pull $IMAGE

            # Detener y eliminar contenedor antiguo
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            # Levantar nuevo contenedor
            docker run -d \
              --restart unless-stopped \
              -p 8000:8000 \
              -v $STATIC_VOLUME:/app/staticfiles \
              -v $DB_VOLUME:/app/db \
              --name $CONTAINER_NAME \
              $IMAGE

            # Aplicar migraciones
            docker exec -T $CONTAINER_NAME python manage.py migrate --noinput
